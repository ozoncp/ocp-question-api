// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_question_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpQuestionApiClient is the client API for OcpQuestionApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpQuestionApiClient interface {
	// Creates a new questions
	MultiCreateQuestionsV1(ctx context.Context, in *MultiCreateQuestionsV1Request, opts ...grpc.CallOption) (*MultiCreateQuestionsV1Response, error)
	// Creates a new question
	CreateQuestionV1(ctx context.Context, in *CreateQuestionV1Request, opts ...grpc.CallOption) (*CreateQuestionV1Response, error)
	// Returns a list of questions
	ListQuestionsV1(ctx context.Context, in *ListQuestionsV1Request, opts ...grpc.CallOption) (*ListQuestionsV1Response, error)
	// Returns a description of the question by Id
	DescribeQuestionV1(ctx context.Context, in *DescribeQuestionV1Request, opts ...grpc.CallOption) (*DescribeQuestionV1Response, error)
	// Updates the question by Id
	UpdateQuestionV1(ctx context.Context, in *UpdateQuestionV1Request, opts ...grpc.CallOption) (*UpdateQuestionV1Response, error)
	// Removes the question by Id
	RemoveQuestionV1(ctx context.Context, in *RemoveQuestionV1Request, opts ...grpc.CallOption) (*RemoveQuestionV1Response, error)
}

type ocpQuestionApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpQuestionApiClient(cc grpc.ClientConnInterface) OcpQuestionApiClient {
	return &ocpQuestionApiClient{cc}
}

func (c *ocpQuestionApiClient) MultiCreateQuestionsV1(ctx context.Context, in *MultiCreateQuestionsV1Request, opts ...grpc.CallOption) (*MultiCreateQuestionsV1Response, error) {
	out := new(MultiCreateQuestionsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.question.api.OcpQuestionApi/MultiCreateQuestionsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpQuestionApiClient) CreateQuestionV1(ctx context.Context, in *CreateQuestionV1Request, opts ...grpc.CallOption) (*CreateQuestionV1Response, error) {
	out := new(CreateQuestionV1Response)
	err := c.cc.Invoke(ctx, "/ocp.question.api.OcpQuestionApi/CreateQuestionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpQuestionApiClient) ListQuestionsV1(ctx context.Context, in *ListQuestionsV1Request, opts ...grpc.CallOption) (*ListQuestionsV1Response, error) {
	out := new(ListQuestionsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.question.api.OcpQuestionApi/ListQuestionsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpQuestionApiClient) DescribeQuestionV1(ctx context.Context, in *DescribeQuestionV1Request, opts ...grpc.CallOption) (*DescribeQuestionV1Response, error) {
	out := new(DescribeQuestionV1Response)
	err := c.cc.Invoke(ctx, "/ocp.question.api.OcpQuestionApi/DescribeQuestionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpQuestionApiClient) UpdateQuestionV1(ctx context.Context, in *UpdateQuestionV1Request, opts ...grpc.CallOption) (*UpdateQuestionV1Response, error) {
	out := new(UpdateQuestionV1Response)
	err := c.cc.Invoke(ctx, "/ocp.question.api.OcpQuestionApi/UpdateQuestionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpQuestionApiClient) RemoveQuestionV1(ctx context.Context, in *RemoveQuestionV1Request, opts ...grpc.CallOption) (*RemoveQuestionV1Response, error) {
	out := new(RemoveQuestionV1Response)
	err := c.cc.Invoke(ctx, "/ocp.question.api.OcpQuestionApi/RemoveQuestionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpQuestionApiServer is the server API for OcpQuestionApi service.
// All implementations must embed UnimplementedOcpQuestionApiServer
// for forward compatibility
type OcpQuestionApiServer interface {
	// Creates a new questions
	MultiCreateQuestionsV1(context.Context, *MultiCreateQuestionsV1Request) (*MultiCreateQuestionsV1Response, error)
	// Creates a new question
	CreateQuestionV1(context.Context, *CreateQuestionV1Request) (*CreateQuestionV1Response, error)
	// Returns a list of questions
	ListQuestionsV1(context.Context, *ListQuestionsV1Request) (*ListQuestionsV1Response, error)
	// Returns a description of the question by Id
	DescribeQuestionV1(context.Context, *DescribeQuestionV1Request) (*DescribeQuestionV1Response, error)
	// Updates the question by Id
	UpdateQuestionV1(context.Context, *UpdateQuestionV1Request) (*UpdateQuestionV1Response, error)
	// Removes the question by Id
	RemoveQuestionV1(context.Context, *RemoveQuestionV1Request) (*RemoveQuestionV1Response, error)
	mustEmbedUnimplementedOcpQuestionApiServer()
}

// UnimplementedOcpQuestionApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpQuestionApiServer struct {
}

func (UnimplementedOcpQuestionApiServer) MultiCreateQuestionsV1(context.Context, *MultiCreateQuestionsV1Request) (*MultiCreateQuestionsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateQuestionsV1 not implemented")
}
func (UnimplementedOcpQuestionApiServer) CreateQuestionV1(context.Context, *CreateQuestionV1Request) (*CreateQuestionV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionV1 not implemented")
}
func (UnimplementedOcpQuestionApiServer) ListQuestionsV1(context.Context, *ListQuestionsV1Request) (*ListQuestionsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestionsV1 not implemented")
}
func (UnimplementedOcpQuestionApiServer) DescribeQuestionV1(context.Context, *DescribeQuestionV1Request) (*DescribeQuestionV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeQuestionV1 not implemented")
}
func (UnimplementedOcpQuestionApiServer) UpdateQuestionV1(context.Context, *UpdateQuestionV1Request) (*UpdateQuestionV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionV1 not implemented")
}
func (UnimplementedOcpQuestionApiServer) RemoveQuestionV1(context.Context, *RemoveQuestionV1Request) (*RemoveQuestionV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQuestionV1 not implemented")
}
func (UnimplementedOcpQuestionApiServer) mustEmbedUnimplementedOcpQuestionApiServer() {}

// UnsafeOcpQuestionApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpQuestionApiServer will
// result in compilation errors.
type UnsafeOcpQuestionApiServer interface {
	mustEmbedUnimplementedOcpQuestionApiServer()
}

func RegisterOcpQuestionApiServer(s grpc.ServiceRegistrar, srv OcpQuestionApiServer) {
	s.RegisterService(&OcpQuestionApi_ServiceDesc, srv)
}

func _OcpQuestionApi_MultiCreateQuestionsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateQuestionsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpQuestionApiServer).MultiCreateQuestionsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.question.api.OcpQuestionApi/MultiCreateQuestionsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpQuestionApiServer).MultiCreateQuestionsV1(ctx, req.(*MultiCreateQuestionsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpQuestionApi_CreateQuestionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpQuestionApiServer).CreateQuestionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.question.api.OcpQuestionApi/CreateQuestionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpQuestionApiServer).CreateQuestionV1(ctx, req.(*CreateQuestionV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpQuestionApi_ListQuestionsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpQuestionApiServer).ListQuestionsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.question.api.OcpQuestionApi/ListQuestionsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpQuestionApiServer).ListQuestionsV1(ctx, req.(*ListQuestionsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpQuestionApi_DescribeQuestionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeQuestionV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpQuestionApiServer).DescribeQuestionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.question.api.OcpQuestionApi/DescribeQuestionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpQuestionApiServer).DescribeQuestionV1(ctx, req.(*DescribeQuestionV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpQuestionApi_UpdateQuestionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpQuestionApiServer).UpdateQuestionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.question.api.OcpQuestionApi/UpdateQuestionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpQuestionApiServer).UpdateQuestionV1(ctx, req.(*UpdateQuestionV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpQuestionApi_RemoveQuestionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQuestionV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpQuestionApiServer).RemoveQuestionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.question.api.OcpQuestionApi/RemoveQuestionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpQuestionApiServer).RemoveQuestionV1(ctx, req.(*RemoveQuestionV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpQuestionApi_ServiceDesc is the grpc.ServiceDesc for OcpQuestionApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpQuestionApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.question.api.OcpQuestionApi",
	HandlerType: (*OcpQuestionApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MultiCreateQuestionsV1",
			Handler:    _OcpQuestionApi_MultiCreateQuestionsV1_Handler,
		},
		{
			MethodName: "CreateQuestionV1",
			Handler:    _OcpQuestionApi_CreateQuestionV1_Handler,
		},
		{
			MethodName: "ListQuestionsV1",
			Handler:    _OcpQuestionApi_ListQuestionsV1_Handler,
		},
		{
			MethodName: "DescribeQuestionV1",
			Handler:    _OcpQuestionApi_DescribeQuestionV1_Handler,
		},
		{
			MethodName: "UpdateQuestionV1",
			Handler:    _OcpQuestionApi_UpdateQuestionV1_Handler,
		},
		{
			MethodName: "RemoveQuestionV1",
			Handler:    _OcpQuestionApi_RemoveQuestionV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-question-api/ocp-question-api.proto",
}
